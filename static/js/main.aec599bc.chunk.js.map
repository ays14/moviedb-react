{"version":3,"sources":["components/Home/Home.js","services/HttpService.js","config.js","components/SearchBar/SearchQuery.js","components/MovieCard/MovieCard.js","components/SearchBar/SearchResults.js","components/SearchBar/SearchBarContainer.js","components/MovieList/MovieList.js","components/MovieList/MovieListContainer.js","components/Home/HomeContainer.js","components/Movie/Movie.js","components/Movie/MovieContainer.js","serviceWorker.js","index.js","routes/index.js"],"names":["Header","styled","h1","_templateObject","Home","props","react_default","a","createElement","Axios","axios","create","baseURL","params","api_key","HttpService","url","get","Wrapper","div","SearchQuery_templateObject","InputForm","form","_templateObject2","Input","input","_templateObject3","SearchQuery","state","searchString","handleInputChange","e","value","target","_this","setState","onSearchChange","onSubmit","event","preventDefault","placeholder","this","onChange","_","debounce","leading","maxWait","React","Component","MovieDetails","li","MovieCard_templateObject","FlexCard","MovieCard_templateObject2","Image","img","MovieCard_templateObject3","Text","p","_templateObject4","MovieCard","data","poster_path","react_router_dom","to","concat","id","key","src","alt","title","Content","SearchResults_templateObject","SearchResults","ul","SearchResults_templateObject2","LoadMsg","SearchResults_templateObject3","SearchBarResults","results","map","components_MovieCard_MovieCard","exhausted","Loader","SearchBarContainer_templateObject","SearchBarContainer_templateObject2","initialState","isLoading","page","listExhausted","prev","SearchBarContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearchChange","val","length","onNotSearching","onSearching","getQueryResults","regexpMatch","re","RegExp","escapeRegExp","filter","res","test","vRef","createRef","observer","IntersectionObserver","handleObserver","bind","root","rootMargin","threshold","entities","y","boundingClientRect","newPage","getMoreQueryResults","queryVal","_this2","language","query","then","response","newData","filteredData","observe","loadingRef","catch","err","console","log","_this3","oldData","toConsumableArray","_this4","react","SearchBar_SearchQuery","SearchBar_SearchResults","loading","ref","SearchBarContainer_Text","FlexContainer","MovieList_templateObject","MovieList_templateObject2","MovieList","MovieList_Content","MovieListContainer_templateObject","MovieListContainer","components_MovieList_MovieList","MovieListContainer_Loader","HomeContainer","isSearching","handleSearching","handleNotSearching","components_Home_Home","SearchBar_SearchBarContainer","MovieList_MovieListContainer","Movie_templateObject","Container","Movie_templateObject2","Head","Movie_templateObject3","Card","Movie_templateObject4","Details","_templateObject5","BoldText","_templateObject6","Subheading","_templateObject7","_templateObject8","Video","iframe","_templateObject9","_templateObject10","Movie","Movie_Wrapper","Movie_Image","posterPath","Movie_Text","tagline","overview","releaseDate","voteCount","voteAverage","trailer","MovieContainer","trailerFound","movieId","match","append_to_response","undefined","videos","find","x","type","components_Movie_Movie","release_date","vote_average","vote_count","getTrailer","Boolean","window","location","hostname","App","react_router","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6YAGA,IAAMA,EAASC,IAAOC,GAAVC,KAgBGC,EAND,SAAAC,GACV,OACIC,EAAAC,EAAAC,cAACR,EAAD,uDCXFS,SAAQC,EAAMC,OAAO,CACvBC,QAAS,+BACTC,OAAQ,CACJC,QCPc,sCD+BPC,mGALAC,EAAKH,GACZ,OAAOJ,EAAMQ,IAAID,EAAK,CAACH,qXEvB/B,IAAMK,EAAUjB,IAAOkB,IAAVC,KAIPC,EAAYpB,IAAOqB,KAAVC,KAITC,EAAQvB,IAAOwB,MAAVC,KA4CIC,6MA7BXC,MAAQ,CACJC,aAAc,MAGrBC,kBAAoB,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBE,EAAKC,SAAS,CACbN,aAAcG,IAETE,EAAK7B,MAAM+B,eAAeJ,4EAIhC,OACU1B,EAAAC,EAAAC,cAACU,EAAD,KACIZ,EAAAC,EAAAC,cAACa,EAAD,CAAWgB,SAAU,SAAAC,GAAK,OAAIA,EAAMC,mBAChCjC,EAAAC,EAAAC,cAACgB,EAAD,CACIgB,YAAY,sBACZR,MAAOS,KAAKb,MAAMC,aAClBa,SAAUC,IAAEC,SAASH,KAAKX,kBAAmB,IAAM,CAC/Ce,SAAS,EACTC,QAAS,kBAtBXC,IAAMC,6jBCtBhC,IAAMC,EAAehD,IAAOiD,GAAVC,KAOZC,EAAWnD,IAAOkB,IAAVkC,KAMRC,EAAQrD,IAAOsD,IAAVC,KAKLC,EAAOxD,IAAOyD,EAAVC,KAkCKC,EArBG,SAAAvD,GAGd,OACIA,EAAMwD,KAAKC,YACPxD,EAAAC,EAAAC,cAACyC,EAAD,KACI3C,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAMC,GAAE,UAAAC,OAAY5D,EAAMwD,KAAKK,IAAMC,IAAK9D,EAAMwD,KAAKK,IACjD5D,EAAAC,EAAAC,cAAC4C,EAAD,KACI9C,EAAAC,EAAAC,cAAC8C,EAAD,CACIc,IARP,iCAQqB/D,EAAMwD,KAAKC,YAAaO,IAAKhE,EAAMwD,KAAKS,QAE1DhE,EAAAC,EAAAC,cAACiD,EAAD,KAAOpD,EAAMwD,KAAKS,UAK9B,gZC9CZ,IAAMC,EAAUtE,IAAOkB,IAAVqD,KAKPC,EAAgBxE,IAAOyE,GAAVC,KAQbC,EAAU3E,IAAOyD,EAAVmB,KA6BEC,EAjBU,SAAAzE,GACrB,OACIC,EAAAC,EAAAC,cAAC+D,EAAD,KACIjE,EAAAC,EAAAC,cAACiE,EAAD,KACKpE,EAAM0E,QAAQC,IAAI,SAAChD,GAAD,OACf1B,EAAAC,EAAAC,cAACyE,EAAD,CAAWpB,KAAM7B,EAAOmC,IAAKnC,EAAMkC,OAEtC7D,EAAM6E,WACH5E,EAAAC,EAAAC,cAACoE,EAAD,8MC9BpB,IAAMO,EAASlF,IAAOkB,IAAViE,KAIN3B,EAAOxD,IAAOyD,EAAV2B,KAIJC,EAAe,CACpBC,WAAW,EACXR,QAAS,GACT/C,MAAO,GACPwD,KAAM,EACHC,eAAe,EACfC,KAAM,GA4JKC,cA1Id,SAAAA,EAAYtF,GAAO,IAAA6B,EAAA,OAAA0D,OAAAC,EAAA,EAAAD,CAAAnD,KAAAkD,IACZzD,EAAA0D,OAAAE,EAAA,EAAAF,CAAAnD,KAAAmD,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvD,KAAMpC,KAwCV4F,mBAAqB,SAACC,GAClB,GAAIA,EAAIC,OAAS,EAEb,OADAjE,EAAK7B,MAAM+F,iBACJlE,EAAKC,SAASmD,GAEzBpD,EAAK7B,MAAMgG,cACXnE,EAAKoE,gBAAgBJ,IA/CThE,EAuGnBqE,YAAc,SAACvE,EAAO6B,GACrB,IAAM2C,EAAK,IAAIC,OAAO9D,IAAE+D,aAAa1E,GAAQ,KAE7C,OAAOW,IAAEgE,OAAO9C,EADA,SAAC+C,GAAD,OAASJ,EAAGK,KAAKD,EAAItC,UAvG/BpC,EAAK4E,KAAO/D,IAAMgE,YACxB7E,EAAKN,MAAQ0D,EAHKpD,mFAeZO,KAAKuE,SAAW,IAAIC,qBAChBxE,KAAKyE,eAAeC,KAAK1E,MARb,CACZ2E,KAAM,KACNC,WAAY,MACZC,UAAW,2CAmBJC,GACX,IAAMC,EAAID,EAAS,GAAGE,mBAAmBD,EACzC,GAAI/E,KAAKb,MAAM8D,KAAO8B,IAAM/E,KAAKb,MAAM6D,cAAe,CACpD,IAAMiC,EAAUjF,KAAKb,MAAM4D,KAAO,EAClC/C,KAAKN,SAAS,CAAEqD,KAAMkC,EAASnC,WAAW,IAFU,IAG5CvD,EAAUS,KAAKb,MAAfI,MACRS,KAAKkF,oBAAoB3F,EAAO0F,GAElCjF,KAAKN,SAAS,CAAEuD,KAAM8B,4CAYVI,GAAU,IAAAC,EAAApF,KACtB1B,EAAYE,IAAZ,gBAAiC,CAC7B6G,SAAU,QACVC,MAAQH,EACRpC,KAAM,IACPwC,KAAK,SAAAC,GACJ,IAAMC,EAAUD,EAASpE,KAAKkB,QACxBoD,EAAeN,EAAKtB,YAAYqB,EAAUM,GAChDL,EAAK1F,SAAS,CACVoD,WAAW,EACXR,QAASoD,EACTnG,MAAO4F,IAEXC,EAAKb,SAASoB,QAAQP,EAAKQ,cAC5BC,MAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIN,wDAIJL,EAAUpC,GAAM,IAAAkD,EAAAjG,KAChC1B,EAAYE,IAAZ,gBAAiC,CAC7B6G,SAAU,QACVC,MAAQH,EACRpC,KAAMA,IACPwC,KAAK,SAAAC,GACJ,IAAMC,EAAUD,EAASpE,KAAKkB,QAC9ByD,QAAQC,IAAIP,GACZ,IAAMS,EAAUD,EAAK9G,MAAMmD,QACrBoD,EAAeO,EAAKnC,YAAYqB,EAAUM,GAC7CA,EAAQ/B,OAAS,EAChBuC,EAAKvG,SAAS,CACVoD,WAAW,EACXR,QAAO,GAAAd,OAAA2B,OAAAgD,EAAA,EAAAhD,CAAM+C,GAAN/C,OAAAgD,EAAA,EAAAhD,CAAkBuC,IACzBnG,MAAO4F,IAGvBc,EAAKvG,SAAS,CACboD,WAAW,EACXE,eAAe,MAGT6C,MAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIN,6CAiBlB,IAAAY,EAAApG,KACR,OACCnC,EAAAC,EAAAC,cAACsI,EAAA,SAAD,KACCxI,EAAAC,EAAAC,cAACuI,EAAD,CACClH,aAAcY,KAAKb,MAAMI,MACVI,eAAgBK,KAAKwD,qBAGf,KAArBxD,KAAKb,MAAMI,MACI1B,EAAAC,EAAAC,cAACsI,EAAA,SAAD,KACIxI,EAAAC,EAAAC,cAACwI,EAAD,CACIjE,QAAStC,KAAKb,MAAMmD,QACpBkE,QAASxG,KAAKb,MAAM2D,UACpBL,UAAWzC,KAAKb,MAAM6D,iBAExBhD,KAAKb,MAAM6D,eACTnF,EAAAC,EAAAC,cAAC2E,EAAD,CAAQ+D,IAAK,SAAAb,GAAU,OAAKQ,EAAKR,WAAaA,IAC1C/H,EAAAC,EAAAC,cAAC2I,EAAD,kBAKZ,aA1IapG,IAAMC,qUC5BvC,IAAMoG,GAAgBnJ,IAAOyE,GAAV2E,MASb9E,GAAUtE,IAAOkB,IAAVmI,MAuBEC,GAZG,SAAAlJ,GACd,OACIC,EAAAC,EAAAC,cAACgJ,GAAD,KACIlJ,EAAAC,EAAAC,cAAC4I,GAAD,KACK/I,EAAMwD,KAAKmB,IAAI,SAAChD,GAAD,OACZ1B,EAAAC,EAAAC,cAACyE,EAAD,CAAWpB,KAAM7B,EAAOmC,IAAKnC,EAAMkC,iICxBvD,IAAMiB,GAASlF,IAAOkB,IAAVsI,MAqGGC,eAlFX,SAAAA,EAAYrJ,GAAO,IAAA6B,EAAA,OAAA0D,OAAAC,EAAA,EAAAD,CAAAnD,KAAAiH,IACfxH,EAAA0D,OAAAE,EAAA,EAAAF,CAAAnD,KAAAmD,OAAAG,EAAA,EAAAH,CAAA8D,GAAA1D,KAAAvD,KAAMpC,KACDuB,MAAQ,CACT2D,WAAW,EACXC,KAAM,EACN3B,KAAM,GACN6B,KAAM,GANKxD,mFAkBfO,KAAKkF,sBAULlF,KAAKuE,SAAW,IAAIC,qBAChBxE,KAAKyE,eAAeC,KAAK1E,MARb,CACZ2E,KAAM,KACNC,WAAY,MACZC,UAAW,IAUf7E,KAAKuE,SAASoB,QAAQ3F,KAAK4F,mDAShBd,GACX,IAAMC,EAAID,EAAS,GAAGE,mBAAmBD,EACzC,GAAI/E,KAAKb,MAAM8D,KAAO8B,EAAG,CACvB,IAAME,EAAUjF,KAAKb,MAAM4D,KAAO,EAClC/C,KAAKN,SAAS,CAAEqD,KAAMkC,EAASnC,WAAW,IAC1C9C,KAAKkF,sBAEPlF,KAAKN,SAAS,CAAEuD,KAAM8B,kDAQJ,IAAAK,EAAApF,KAClB1B,EAAYE,IAAI,iBAAkB,CAAC6G,SAAU,QAAStC,KAAM/C,KAAKb,MAAM4D,OAAOwC,KAAK,SAAAC,GAC/E,IAAMlD,EAAU8C,EAAKjG,MAAMiC,KAC3BgE,EAAK1F,SAAS,CACV0B,KAAI,GAAAI,OAAA2B,OAAAgD,EAAA,EAAAhD,CAAMb,GAANa,OAAAgD,EAAA,EAAAhD,CAAkBqC,EAASpE,KAAKkB,UACpCQ,WAAW,MAEhB+C,MAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIN,6CAIf,IAAAS,EAAAjG,KACL,OACInC,EAAAC,EAAAC,cAACsI,EAAA,SAAD,KACIxI,EAAAC,EAAAC,cAACmJ,GAAD,CAAW9F,KAAMpB,KAAKb,MAAMiC,OAC5BvD,EAAAC,EAAAC,cAACoJ,GAAD,CAAQV,IAAK,SAAAb,GAAU,OAAKK,EAAKL,WAAaA,IAC1C/H,EAAAC,EAAAC,cAAA,iCAlFauC,IAAMC,WCwBxB6G,8MA9BXjI,MAAQ,CACJkI,aAAa,KAGjBC,gBAAkB,WACd7H,EAAKC,SAAS,CACV2H,aAAa,OAIrBE,mBAAqB,WACjB9H,EAAKC,SAAS,CACV2H,aAAa,6EAKjB,OACIxJ,EAAAC,EAAAC,cAACsI,EAAA,SAAD,KACIxI,EAAAC,EAAAC,cAACyJ,EAAD,MACA3J,EAAAC,EAAAC,cAAC0J,EAAD,CACI7D,YAAa5D,KAAKsH,gBAClB3D,eAAgB3D,KAAKuH,sBAEvBvH,KAAKb,MAAMkI,aAAexJ,EAAAC,EAAAC,cAAC2J,GAAD,cAzBhBnH,4zCCP5B,IAAM9B,GAAUjB,IAAOkB,IAAViJ,MAEPC,GAAYpK,IAAOkB,IAAVmJ,MAMTC,GAAOtK,IAAOC,GAAVsK,MAOJC,GAAOxK,IAAOkB,IAAVuJ,MASJC,GAAU1K,IAAOkB,IAAVyJ,MAOPC,GAAW5K,IAAOyD,EAAVoH,MAKRC,GAAa9K,IAAOyD,EAAVsH,MAMVvH,GAAOxD,IAAOyD,EAAVuH,MAIJC,GAAQjL,IAAOkL,OAAVC,MAKL9H,GAAQrD,IAAOsD,IAAV8H,MAqDIC,GAzCD,SAAAjL,GAEN,OACIC,EAAAC,EAAAC,cAAC+K,GAAD,KACIjL,EAAAC,EAAAC,cAAC+J,GAAD,KACIjK,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAIJ1D,EAAAC,EAAAC,cAAC6J,GAAD,KACI/J,EAAAC,EAAAC,cAACiK,GAAD,KACInK,EAAAC,EAAAC,cAACgL,GAAD,CAAOpH,IAVN,iCAUoB/D,EAAMoL,WAAYpH,IAAI,YAC3C/D,EAAAC,EAAAC,cAACqK,GAAD,KACKxK,EAAMiE,OAEXhE,EAAAC,EAAAC,cAACkL,GAAD,KACKrL,EAAMsL,UAGfrL,EAAAC,EAAAC,cAACmK,GAAD,KACIrK,EAAAC,EAAAC,cAACuK,GAAD,iBACAzK,EAAAC,EAAAC,cAACkL,GAAD,KAAOrL,EAAMuL,UACbtL,EAAAC,EAAAC,cAACkL,GAAD,qBAAoBrL,EAAMwL,aACL,IAApBxL,EAAMyL,UACH,KAEAxL,EAAAC,EAAAC,cAACkL,GAAD,cAAarL,EAAM0L,YAAnB,OAAoC1L,EAAMyL,UAA1C,UAEe,OAAlBzL,EAAM2L,QACH1L,EAAAC,EAAAC,cAAC0K,GAAD,CAAO9G,IAAG,iCAAAH,OAAmC5D,EAAM2L,WAInD1L,EAAAC,EAAAC,cAACkL,GAAD,8BCpBbO,eA7DX,SAAAA,EAAY5L,GAAO,IAAA6B,EAAA,OAAA0D,OAAAC,EAAA,EAAAD,CAAAnD,KAAAwJ,IACf/J,EAAA0D,OAAAE,EAAA,EAAAF,CAAAnD,KAAAmD,OAAAG,EAAA,EAAAH,CAAAqG,GAAAjG,KAAAvD,KAAMpC,KACGuB,MAAQ,CACbiC,KAAM,GACNqI,cAAc,GAJHhK,oFAcE,IAAA2F,EAAApF,KACO0J,EAAe1J,KAAKpC,MAArC+L,MAAQvL,OAASsL,QACxBpL,EAAYE,IAAZ,UAAAgD,OAA0BkI,GAAW,CAACrE,SAAU,QAASuE,mBAAoB,WAAWrE,KAAK,SAAAC,GACzFJ,EAAK1F,SAAS,CACV0B,KAAMoE,EAASpE,SAEpByE,MAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIN,iDAYpB,QAA+BqE,IAA3B7J,KAAKb,MAAMiC,KAAK0I,OAAsB,CACtC,IAAMA,EAAS9J,KAAKb,MAAMiC,KAAK0I,OAAOxH,QAAQyH,KAAK,SAACC,GAChD,MAAkB,YAAXA,EAAEC,OAEb,YAAeJ,IAAXC,EACO,KAEAA,EAAOpI,sCAMtB,OACI7D,EAAAC,EAAAC,cAACmM,GAAD,CACIrI,MAAO7B,KAAKb,MAAMiC,KAAKS,MACvBqH,QAASlJ,KAAKb,MAAMiC,KAAK8H,QACzBC,SAAUnJ,KAAKb,MAAMiC,KAAK+H,SAC1BH,WAAYhJ,KAAKb,MAAMiC,KAAKC,YAC5B+H,YAAapJ,KAAKb,MAAMiC,KAAK+I,aAC7Bb,YAAatJ,KAAKb,MAAMiC,KAAKgJ,aAC7Bf,UAAWrJ,KAAKb,MAAMiC,KAAKiJ,WAC3Bd,QAASvJ,KAAKsK,sBA9DDhK,IAAMC,WCAfgK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCXN,IAAMgB,GACF9M,EAAAC,EAAAC,cCCW,kBACbF,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACEzD,EAAAC,EAAAC,cAAC6M,EAAA,EAAD,KACE/M,EAAAC,EAAAC,cAAC6M,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3D,KACjCvJ,EAAAC,EAAAC,cAAC6M,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,OAAK,EAACC,UAAWvB,QDLjD,MAGJwB,IAASC,OAAON,GAAKO,SAASC,eAAe,SDsHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/F,KAAK,SAAAgG,GACjCA,EAAaC","file":"static/js/main.aec599bc.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = styled.h1`\n    text-align: center;\n    border-bottom: 0.5px solid black;\n    padding-bottom: 10px;\n`\n\n/**\n * Home component\n *\n */\n const Home = props => {\n    return (\n        <Header>Movie Hunter</Header>\n    );\n}\n\nexport default Home;\n","import axios from 'axios';\nimport { apiKey}  from '../config';\n\n// Create axios instance\nconst Axios = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: apiKey\n    },\n});\n\n/**\n * HTTP Service to make API calls for above set base URL\n *\n * @class HttpService\n */\nclass HttpService {\n    /**\n     * GET Method for HTTP Call\n     *\n     * @static\n     * @param {string} url API URL\n     * @param {object} params Parameters for request\n     * @returns Axios response object\n     * @memberof HttpService\n     */\n    static get(url, params) {\n        return Axios.get(url, {params});\n    }\n}\n\nexport default HttpService;\n","export const apiKey = '2556ac28d3c2f708dba5bb4bbb73cbe3';","import React from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    align-content: center;\n    text-align: center;\n`;\nconst InputForm = styled.form`\n\tbackground-color: lightgray;\n`;\n\nconst Input = styled.input`\n\ttext-align: center;\n\twidth: 40%;\n\theight: 35px;\n`;\n\n/**\n * Renders the search bar and also the fetched results\n * Shows the results in a scrollable lists of all the pages of search results fetched\n *\n * @class SearchBar\n * @props Component Properties\n * @state Component State\n */\nclass SearchQuery extends React.Component {\n    state = {\n        searchString: ''\n    }\n\n\thandleInputChange = (e) => {\n\t\tconst value = e.target.value;\n\t\tthis.setState({ \n\t\t\tsearchString: value\n        });\n        this.props.onSearchChange(value);\n\t}\n\n\trender() {\n\t\treturn (\n            <Wrapper>\n                <InputForm onSubmit={event => event.preventDefault()}>\n                    <Input\n                        placeholder=\"Search for movie...\"\n                        value={this.state.searchString}\n                        onChange={_.debounce(this.handleInputChange, 1000, {\n                            leading: true,\n                            maxWait: 1500,\n                        })} />\n                </InputForm>\n            </Wrapper>\n\t\t)\n\t}\n}\n\nexport default SearchQuery;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst MovieDetails = styled.li`\n    display: inline-block;\n    align-self: center;\n    padding: 8px 2% 8px 2%;\n    margin-bottom: 15px;\n`;\n\nconst FlexCard = styled.div`\n    text-align: center;\n    height: 320px;\n    width: 240px;\n`;\n\nconst Image = styled.img`\n    max-height: 280px;\n    max-width: 185px;\n`;\n\nconst Text = styled.p`\n    font-size: 14px;\n    text-decoration: darkslategray;\n`;\n\n/**\n * Card for one movie on the homepage\n * Link to Movie Details page for a particular movie\n * Returns null if the poster is not found\n *\n * @class MovieCard\n * @props Component Properties\n */\nconst MovieCard = props => {\n    const imageURL = 'http://image.tmdb.org/t/p/w185';\n\n    return (\n        props.data.poster_path ? (\n            <MovieDetails >\n                <Link to={`/movie/${props.data.id}`} key={props.data.id}>\n                    <FlexCard>\n                        <Image \n                            src={imageURL+props.data.poster_path} alt={props.data.title}>\n                        </Image>\n                        <Text>{props.data.title}</Text>\n                    </FlexCard>        \n                </Link>\n            </MovieDetails>\n        ) : (\n            null   \n        )\n    )\n}\n\nexport default MovieCard;","import React from 'react';\nimport styled from 'styled-components';\n\nimport MovieCard from '../MovieCard/';\n\nconst Content = styled.div`\n\ttext-align: center;\n\talign-content: center;\n`;\n\nconst SearchResults = styled.ul`\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-wrap: wrap;\n\talign-items: baseline;\n\talign-content: left;\n`;\n\nconst LoadMsg = styled.p`\n\tfont-size: 20px;\n`;\n\n/**\n * Renders the search bar and also the fetched results\n * Shows the results in a scrollable lists of all the pages of search results fetched\n *\n * @class SearchBar\n * @props Component Properties\n * @state Component State\n */\nconst SearchBarResults = props => {\n    return (\n        <Content>\n            <SearchResults>\n                {props.results.map((value) => (\n                    <MovieCard data={value} key={value.id}/>\n                ))}\n                {props.exhausted && (\n                    <LoadMsg>\n                        No search results to show\n                    </LoadMsg>\t\t\t\t\t\n                )}\n            </SearchResults>  \n        </Content>\n    )\n}\n\nexport default SearchBarResults;\n","import React, {Fragment} from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\n\nimport HttpService from '../../services/HttpService';\nimport SearchQuery from './SearchQuery';\nimport SearchResults from './SearchResults';\n\nconst Loader = styled.div`\n    text-align: center;\n`;\n\nconst Text = styled.p`\n\n`;\n\nconst initialState = {\n\tisLoading: false,\n\tresults: [],\n\tvalue: '',\n\tpage: 1,\n    listExhausted: false,\n    prev: 0,\n};\n\n/**\n * Renders the search bar and also the fetched results\n * Shows the results in a scrollable lists of all the pages of search results fetched\n *\n * @class SearchBar\n * @props Component Properties\n * @state Component State\n */\nclass SearchBarContainer extends React.Component {\n\t/**\n\t * Creates an instance of SearchBar.\n\t * \n\t * @param {*} props\n\t * @memberof SearchBar\n\t */\n\tconstructor(props) {\n        super(props);\n        this.vRef = React.createRef();\n\t\tthis.state = initialState;\n\t}\n\n    componentDidMount () {\n        // Set options for observer\n        const options = {\n            root: null, // Set page as root\n            rootMargin: '0px', \n            threshold: 0,\n        };\n\n        // Create an instance of Intersection Observer\n        this.observer = new IntersectionObserver(\n            this.handleObserver.bind(this), //callback\n            options\n        );\n\n        // Observe the ref with value loadingRef\n        // this.observer.observe(this.loadingRef);\n    }\n    \n    /**\n     * Handle the observer's action or observation\n     *\n     * @param {array} entities\n     * @memberof PopularMovies\n     */\n    handleObserver(entities) {\n        const y = entities[0].boundingClientRect.y;\n        if (this.state.prev > y && !this.state.listExhausted) {\n          const newPage = this.state.page + 1;\n          this.setState({ page: newPage, isLoading: true });\n          const { value } = this.state;\n          this.getMoreQueryResults(value, newPage);\n        }\n        this.setState({ prev: y });\n    }\n\n    handleSearchChange = (val) => {\n        if (val.length < 1) {\n            this.props.onNotSearching();\n            return this.setState(initialState);\n        }\n        this.props.onSearching();\n        this.getQueryResults(val);\n    }\n    \n    getQueryResults(queryVal) {\n        HttpService.get(`/search/movie`, {\n            language: 'en-US',\n            query : queryVal,\n            page: 1\n        }).then(response => {\n            const newData = response.data.results;\n            const filteredData = this.regexpMatch(queryVal, newData);\n            this.setState({\n                isLoading: false,\n                results: filteredData,\n                value: queryVal,\n            });\n            this.observer.observe(this.loadingRef);\n        }).catch((err) => {\n            console.log(err.response);\n        });\n    }\n\n    getMoreQueryResults(queryVal, page) {\n        HttpService.get(`/search/movie`, {\n            language: 'en-US',\n            query : queryVal,\n            page: page\n        }).then(response => {\n            const newData = response.data.results;\n            console.log(newData);\n            const oldData = this.state.results;\n            const filteredData = this.regexpMatch(queryVal, newData);\n            if(newData.length > 0) {\n                this.setState({\n                    isLoading: false,\n                    results: [...oldData, ...filteredData],\n                    value: queryVal,\n                });\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tlistExhausted: true,\n                });\n            }\n        }).catch((err) => {\n            console.log(err.response);\n        });\n    }\n\n\t/**\n\t * Performs reg exp match for search string in the results\n\t *\n\t * @memberof SearchBar\n\t * @param {string} value value of search string\n\t * @param {string} data value of result of API call\n\t */\n\tregexpMatch = (value, data) => {\n\t\tconst re = new RegExp(_.escapeRegExp(value), 'i');\n\t\tconst isMatch = (res) => re.test(res.title);\n\t\treturn _.filter(data, isMatch);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<SearchQuery\n\t\t\t\t\tsearchString={this.state.value}\n                    onSearchChange={this.handleSearchChange}   \n\t\t\t\t/>\n                \n\t\t\t\t{this.state.value !== '' ? (\n                    <Fragment>\n                        <SearchResults \n                            results={this.state.results}\n                            loading={this.state.isLoading}\n                            exhausted={this.state.listExhausted}\n                        />\n                        {!this.state.listExhausted && (\n                            <Loader ref={loadingRef => (this.loadingRef = loadingRef)} >\n                                <Text>Loading</Text>\n                            </Loader>\n                        )}\n                    </Fragment>\n                ) : (\n                    null\n                )}\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nexport default SearchBarContainer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport MovieCard from '../MovieCard';\n\nconst FlexContainer = styled.ul`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: baseline;\n    margin: 10px ;\n    align-content: center;\n`;\n\nconst Content = styled.div`\n    min-height: 900px;\n`;\n\n/**\n * Renders and infinitely scrollable list\n * Stores the data in state as an Array and calls MovieCard to show each movie\n *\n * @class PopularMovies\n * @state Component State\n */\nconst MovieList = props => {\n    return (\n        <Content>\n            <FlexContainer >\n                {props.data.map((value) => (\n                    <MovieCard data={value} key={value.id}/>\n                    ))}\n            </FlexContainer>\n        </Content>\n    )\n}\n\nexport default MovieList;","import React, {Fragment} from 'react';\nimport styled from 'styled-components';\n\nimport MovieList from './MovieList';\nimport HttpService from '../../services/HttpService';\n\nconst Loader = styled.div`\n    display: block;\n    text-align: center;\n`;\n\n/**\n * Renders and infinitely scrollable list\n * Stores the data in state as an Array and calls MovieCard to show each movie\n *\n * @class MovieListContainer\n * @state Component State\n */\nclass MovieListContainer extends React.Component {\n    /**\n     * Creates an instance of PopularMovies.\n     * \n     * @param {*} props\n     * @memberof PopularMovies\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            page: 1,\n            data: [],\n            prev: 0,\n        }\n    }\n\n    /**\n     * Calls the first set of data from API call\n     * Initializes the Intersection Observer to assist in infinite scroll\n     *\n     * @memberof PopularMovies\n     * @props Component Properties\n     */\n    componentDidMount() {\n        this.getMoreQueryResults();\n        \n        // Set options for observer\n        const options = {\n            root: null, // Set page as root\n            rootMargin: '0px', \n            threshold: 0,\n        };\n\n        // Create an instance of Intersection Observer\n        this.observer = new IntersectionObserver(\n            this.handleObserver.bind(this), //callback\n            options\n        );\n\n        // Observe the ref with value loadingRef\n        this.observer.observe(this.loadingRef);\n    }\n    \n    /**\n     * Handle the observer's action or observation\n     *\n     * @param {array} entities\n     * @memberof PopularMovies\n     */\n    handleObserver(entities) {\n        const y = entities[0].boundingClientRect.y;\n        if (this.state.prev > y) {\n          const newPage = this.state.page + 1;\n          this.setState({ page: newPage, isLoading: true });\n          this.getMoreQueryResults();\n        }\n        this.setState({ prev: y });\n    }\n\n    /**\n     * Fetch more movies via API call incrementing the page by one\n     * And add them to state\n     * @memberof PopularMovies\n     */\n    getMoreQueryResults() {\n        HttpService.get('/movie/popular', {language: 'en-US', page: this.state.page}).then(response => {\n            const results = this.state.data;\n            this.setState({\n                data: [...results, ...response.data.results],\n                isLoading: false,\n            });\n        }).catch((err) => {\n            console.log(err.response);\n        });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <MovieList data={this.state.data} />\n                <Loader ref={loadingRef => (this.loadingRef = loadingRef)} >\n                    <h3>Loading...</h3>\n                </Loader>\n            </Fragment>\n        )\n    }\n}\n\nexport default MovieListContainer;","import React, { Component, Fragment } from 'react';\nimport Home from './Home';\nimport SearchBarContainer from '../SearchBar';\nimport MovieListContainer from '../MovieList';\n\n/**\n * Home container\n * Renders other child components of the homepage\n *\n * @class HomeContainer\n */\nclass HomeContainer extends Component {\n    state = {\n        isSearching: false\n    }\n\n    handleSearching = () => {\n        this.setState({\n            isSearching: true,\n        });\n    }\n\n    handleNotSearching = () => {\n        this.setState({\n            isSearching: false,\n        });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Home />\n                <SearchBarContainer \n                    onSearching={this.handleSearching} \n                    onNotSearching={this.handleNotSearching}\n                />\n                {!this.state.isSearching && <MovieListContainer />}        \n            </Fragment>\n        );\n    }\n}\n\nexport default HomeContainer;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n`;\nconst Container = styled.div`\n    display: flex;\n    column-count: 2;\n    column-gap: 25%;\n`;\n\nconst Head = styled.h1`\n    display: block;\n    align-content: center;\n    text-align: center;\n    margin-block-end: 5px;\n`;\n\nconst Card = styled.div`\n    margin-top: 1.5%;\n    margin-right: 1.5%;\n    text-align: right;\n    border-right: 2px solid black;\n    padding-right: 3%;\n    width: 50%;\n`;\n\nconst Details = styled.div`\n    text-align: left;\n    width: 50%;\n    margin-right: 10%;\n    margin-left: 1.5%;\n`;\n\nconst BoldText = styled.p`\n    font-size: 20px;\n    font-weight: bold;\n`;\n\nconst Subheading = styled.p`\n    font-size: 18px;\n    text-decoration-line: underline;\n    font-weight: bold;\n`;\n\nconst Text = styled.p`\n    font-size: 16px;\n`;\n\nconst Video = styled.iframe`\n    height: 90%;\n    width: 100%;\n`;\n\nconst Image = styled.img`\n    \n`;\n\n/**\n * Renders the component for Movie Details\n * Shows movie title, poster, synopsis and trailer a few more details\n *\n * @class Movie\n * @props Component Properties\n * @state Component State\n */\nconst Movie = props => {\n        const imageURL = 'http://image.tmdb.org/t/p/w200';\n        return (\n            <Wrapper>\n                <Head>\n                    <Link to='/'>\n                        Movie Hunter\n                    </Link>\n                </Head>\n                <Container>\n                    <Card>\n                        <Image src={imageURL+props.posterPath} alt='loading' />\n                        <BoldText>\n                            {props.title}\n                        </BoldText>\n                        <Text>\n                            {props.tagline}\n                        </Text>\n                    </Card>\n                    <Details>\n                        <Subheading>Synopsis</Subheading>\n                        <Text>{props.overview}</Text>\n                        <Text>Released on: {props.releaseDate}</Text>\n                        {props.voteCount === 0 ? (\n                            null\n                        ) : (\n                            <Text>Rated {props.voteAverage} by {props.voteCount} votes</Text>\n                        )}\n                        {props.trailer !== null ? (\n                            <Video src={`https://www.youtube.com/embed/${props.trailer}`}>\n\n                            </Video>\n                        ) : (\n                            <Text>Trailer not found</Text>\n                        )}\n                    </Details>\n                </Container>\n            </Wrapper>\n        )\n}\n\nexport default Movie;\n","import React from 'react';\nimport HttpService from '../../services/HttpService';\nimport Movie from './Movie';\n\n/**\n * Renders the component for Movie Details\n * Shows movie title, poster, synopsis and trailer a few more details\n *\n * @class Movie\n * @props Component Properties\n * @state Component State\n */\nclass MovieContainer extends React.Component {\n    /**\n     * Creates an instance of Movie.\n     *\n     * @param {*} props\n     * @memberof Movie\n     */\n    constructor(props) {\n        super(props)\n            this.state = {\n            data: {},\n            trailerFound: true\n        }\n    }\n    \n    /**\n     * Perfoms API call to get movie details\n     * Uses HTTP Service\n     * \n     * @memberof Movie\n     */\n    componentWillMount() {\n        const {match: {params: {movieId} } } = this.props;\n        HttpService.get(`/movie/${movieId}`, {language: 'en-US', append_to_response: 'videos'}).then(response => {\n            this.setState({\n                data: response.data,\n            });\n        }).catch((err) => {\n            console.log(err.response);\n        });\n\n    }\n\n    /**\n     * Checks whether trailer is found in JSON fetched from movie details\n     *\n     * @returns youtube key of trailer\n     * @memberof Movie\n     */\n    getTrailer() {\n        if (this.state.data.videos !== undefined) {\n            const videos = this.state.data.videos.results.find((x) => {\n                return x.type === \"Trailer\";\n            });\n            if (videos === undefined) {\n                return null;\n            } else {\n                return videos.key;\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Movie \n                title={this.state.data.title}\n                tagline={this.state.data.tagline}\n                overview={this.state.data.overview}\n                posterPath={this.state.data.poster_path}\n                releaseDate={this.state.data.release_date}\n                voteAverage={this.state.data.vote_average}\n                voteCount={this.state.data.vote_count}\n                trailer={this.getTrailer()}\n            />\n        )\n    }\n}\n\nexport default MovieContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\nimport * as registerServiceWorker from './serviceWorker';\n\n// Define app\nconst App = (\n    <Routes />\n);\n\nReactDOM.render(App, document.getElementById('root'));\nregisterServiceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport HomeContainer from '../components/Home';\nimport MovieContainer from '../components/Movie';\n\n/**\n * Create routes \n */\nexport default () => (\n  <HashRouter>\n    <Switch>\n      <Route path=\"/\" exact component={HomeContainer} />\n      <Route path=\"/movie/:movieId\" exact component={MovieContainer} />\n    </Switch>\n  </HashRouter>\n);\n"],"sourceRoot":""}